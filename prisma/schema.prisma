datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model DrawTable {
  id       String  @id @default(uuid())
  title    String  @db.Text
  img      String   
  groupId  String  @db.Text 
  group    Group   @relation(fields: [groupId], references: [id])
}

model Group {
  id                 String              @id @default(uuid())
  grouptitle         String              @db.Text           
  leader             String         
  drawTables         DrawTable[]    
  groupUser          User[]
  groupNotifications GroupNotification[]
  groupApplications  GroupApplication[]
}

model GroupApplication {
  id                String    @id @default(uuid())
  status            Boolean
  groupId           String
  group             Group     @relation(fields: [groupId], references: [id])
  userId            String    @unique
  username          String
  user              User      @relation(fields: [userId], references: [id])
}

model User {
  id                 String              @id @default(uuid())
  username           String              @unique
  imageUrl           String              @db.Text
  externalUserId     String              @unique
  bio                String?             @db.Text
  isteacher          Boolean

  following          Follow[]            @relation("Following")
  followedBy         Follow[]            @relation("FollowedBy")

  blocking           Block[]             @relation("Blocking")
  blockedBy          Block[]             @relation("BlockedBy")

  stream             Stream?

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  groupUser          Group[]
  personalNotifications PersonalNotification[]
  groupApplication   GroupApplication?  
}




model Stream {
  id               String   @id @default(uuid())
  name             String   @db.Text
  thumbnailUrl     String?  @db.Text
  ingressId        String?  @unique
  serverUrl        String?  @db.Text
  streamKey        String?  @db.Text
  isLive           Boolean  @default(false)
  isChatEnabled    Boolean  @default(true)
  isChatDelayed    Boolean  @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}

model Follow {
  id             String   @id @default(uuid())
  followerId     String
  followingId    String

  follower       User     @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following      User     @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id             String   @id @default(uuid())
  blockerId      String
  blockedId      String

  blocker        User     @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked        User     @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model GroupNotification {
  id             String   @id @default(uuid())
  groupId        String
  content        String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  type           String
  group          Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model PersonalNotification {
  id             String   @id @default(uuid())
  userId         String
  content        String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  type           String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
